
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import filters
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import requests
from datetime import datetime, timedelta
import json
from telegram import BotCommand
import logging
import os

TELEGRAM_TOKEN = "7735977476:AAHm8aP7zBdwaLmiEtOk6iGefE5gnLOpo00"
WEATHER_API_KEY = "85dedf97d07b5ba59da16b7033a9d1f0"
CHOOSING_TIME, CONFIRMING = range(2)
ADMIN_ID = 1227953014

holidays = [
    {
        "name": "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å",
        "date": datetime(2025, 5, 1),
        "event": "–ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏",
        "tickets_available": True
    },
    {
        "name": "–î–µ–Ω—å —Ç—Ä—É–¥–∞",
        "date": datetime(2025, 5, 1),
        "event": "–§–µ—Å—Ç–∏–≤–∞–ª—å —Å –º—É–∑—ã–∫–æ–π –∏ –µ–¥–æ–π",
        "tickets_available": False
    },
    {
        "name": "–°—É—Ä—Ö–∞—Ä–±–∞–Ω",
        "date": datetime(2025, 6, 5),
        "event": "–ë—É—Ä—è—Ç—Å–∫–∏–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –Ω–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫",
        "tickets_available": False
    },
    # –î–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
]

appointments = {}
available_times = ["09:00", "10:00", "11:00", "14:00", "15:00", "16:00"]

from telegram import ReplyKeyboardMarkup

async def confirm_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_response = update.message.text.lower()
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    if user_response == '–¥–∞':
        chosen_time = context.user_data['chosen_time']
        appointments[chosen_time] = user_id
        await update.message.reply_text(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {chosen_time}!")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
            f"–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º:\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"–í—Ä–µ–º—è: {chosen_time}\n"
            f"–î–∞—Ç–∞: –°–µ–≥–æ–¥–Ω—è"  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –≤—ã —Ä–∞—Å—à–∏—Ä–∏—Ç–µ –ª–æ–≥–∏–∫—É
        )
        await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ logging –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
        logging.info(f"–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {chosen_time}")
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)
    else:
        await update.message.reply_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    
    context.user_data.clear()  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    return ConversationHandler.END


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id  
    
    if user_id == ADMIN_ID:  # –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            ["üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"],
            ["üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"],
            ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üå¶ –ü–æ–≥–æ–¥–∞"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    else:  # –ú–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"],
            ["üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", "üìå –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"],
            ["üå¶ –ü–æ–≥–æ–¥–∞", "üìú –ú–æ–∏ –∑–∞–ø–∏—Å–∏"],
            ["üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
            reply_markup=reply_markup
        )

async def view_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not appointments:
        await update.message.reply_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
    else:
        message = "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º:\n"
        for time, uid in appointments.items():
            message += f"{time}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {uid}\n"
        await update.message.reply_text(message)
    
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await start(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        "/contact - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        "/schedule - –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã\n"
        "/appointment - –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º\n"
        "/weather - –ü–æ–≥–æ–¥–∞ –≤ –ê—Ä–≥–∞–¥–µ\n"
        "/my_appointments - –ú–æ–∏ –∑–∞–ø–∏—Å–∏\n"
        "/events - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è\n"
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º"
    )

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        "–ê–¥—Ä–µ—Å: —É–ª. –•—ã—à–∏–∫—Ç—É–µ–≤–∞, 14, —É–ª—É—Å –ê—Ä–≥–∞–¥–∞\n"
        "–¢–µ–ª–µ—Ñ–æ–Ω: +7(30149)-4-11-88\n"
        "Email: admargada@yandex.ru"
    )

async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        "–ü–Ω-–ü—Ç: 9:00 - 17:00\n"
        "–û–±–µ–¥: 13:00 - 14:00\n"
        "–°–±-–í—Å: –í—ã—Ö–æ–¥–Ω–æ–π"
    )

async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not WEATHER_API_KEY:
        await update.message.reply_text("–û—à–∏–±–∫–∞: API-–∫–ª—é—á –Ω–µ –∑–∞–¥–∞–Ω.")
        return

    url = f"http://api.openweathermap.org/data/2.5/weather?q=Kurumkan&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        temp = round(data['main']['temp'])
        description = data['weather'][0]['description']
        humidity = data['main']['humidity']
        wind_speed = round(data['wind']['speed'])

        weather_message = (
            f"üåç –ü–æ–≥–æ–¥–∞ –≤ –ê—Ä–≥–∞–¥–µ:\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"üå§ {description.capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        )
        await update.message.reply_text(weather_message)
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {str(e)}")

async def start_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    available = [time for time in available_times if time not in appointments]
    
    if not available:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END
    
    reply_keyboard = [[time] for time in available]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return CHOOSING_TIME

async def choose_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chosen_time = update.message.text
    if chosen_time not in available_times or chosen_time in appointments:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
        available = [time for time in available_times if time not in appointments]
        if not available:
            await update.message.reply_text("–í—Å–µ —Å–ª–æ—Ç—ã –∑–∞–Ω—è—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await start(update, context)
            return ConversationHandler.END
        reply_keyboard = [[time] for time in available]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
        )
        return CHOOSING_TIME
    
    context.user_data['chosen_time'] = chosen_time
    await update.message.reply_text(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {chosen_time}?\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardRemove()
    )
    return CONFIRMING


async def my_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_appointments = [time for time, uid in appointments.items() if uid == user_id]
    
    if user_appointments:
        message = "–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for i, time in enumerate(user_appointments, 1):
            message += f"{i}. {time}\n"
        message += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –∏–ª–∏ '0' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
        await update.message.reply_text(message)
        return CANCEL_APPOINTMENT  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END

async def cancel_appointment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_appointments = [time for time, uid in appointments.items() if uid == user_id]
    
    try:
        choice = int(update.message.text)
        if choice == 0:  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
            await update.message.reply_text("–û—Ç–º–µ–Ω–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            await start(update, context)
            return ConversationHandler.END
        elif 1 <= choice <= len(user_appointments):
            time_to_cancel = user_appointments[choice - 1]
            del appointments[time_to_cancel]  # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
            await update.message.reply_text(f"–ó–∞–ø–∏—Å—å –Ω–∞ {time_to_cancel} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—Ç–º–µ–Ω–µ
            username = update.message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            admin_message = (
                f"–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"–í—Ä–µ–º—è: {time_to_cancel}"
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ logging –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å –Ω–∞ {time_to_cancel}")
            
            await start(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            return ConversationHandler.END
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–ª–∏ '0' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return CANCEL_APPOINTMENT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–ª–∏ '0').")
        return CANCEL_APPOINTMENT

CHOOSING_TIME, CONFIRMING = range(2)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏
CHOOSE_EVENT, CONFIRM_PURCHASE, ENTER_TICKETS = range(3, 6)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
CANCEL_APPOINTMENT = 6

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∏–ª–µ—Ç–æ–≤
MAX_TICKETS = 10

async def start_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"start_events: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {context.user_data.get('state', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    today = datetime.now()
    upcoming = [h for h in holidays if today < h["date"] < today + timedelta(days=30)]
    if not upcoming:
        await update.message.reply_text("–í –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END
    else:
        context.user_data["upcoming_events"] = upcoming
        message = "–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n"
        for i, event in enumerate(upcoming, 1):
            tickets = "–ë–∏–ª–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã." if event["tickets_available"] else "–ë–∏–ª–µ—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è."
            message += f"{i}. {event['name']} ({event['date'].strftime('%Y-%m-%d')}): {event['event']}. {tickets}\n"
        message += "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
        await update.message.reply_text(message)
        return CHOOSE_EVENT

async def choose_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"choose_event: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {context.user_data.get('state', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    try:
        choice = int(update.message.text) - 1
        upcoming = context.user_data["upcoming_events"]
        if 0 <= choice < len(upcoming):
            event = upcoming[choice]
            context.user_data["chosen_event"] = event
            if event["tickets_available"]:
                await update.message.reply_text(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {event['name']}.\n"
                    f"–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã? (–¥–∞/–Ω–µ—Ç)"
                )
                return CONFIRM_PURCHASE
            else:
                await update.message.reply_text(
                    f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ {event['name']}: {event['event']}.\n"
                    "–ë–∏–ª–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è."
                )
                await start(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                return ConversationHandler.END
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
            return CHOOSE_EVENT
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è.")
        return CHOOSE_EVENT

async def confirm_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"confirm_purchase: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {context.user_data.get('state', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    response = update.message.text.lower()
    if response == "–¥–∞":
        event = context.user_data["chosen_event"]
        await update.message.reply_text(
            f"–°–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –Ω–∞ {event['name']}? (–ú–∞–∫—Å–∏–º—É–º {MAX_TICKETS})"
        )
        return ENTER_TICKETS
    elif response == "–Ω–µ—Ç":
        event = context.user_data["chosen_event"]
        await update.message.reply_text(
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ {event['name']}: {event['event']}.\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /events."
        )
        await start(update, context)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
        return CONFIRM_PURCHASE

async def enter_tickets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"enter_tickets: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç '{update.message.text}' –æ—Ç {update.effective_user.id}")
    try:
        num_tickets = int(update.message.text)
        if num_tickets <= 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return ENTER_TICKETS
        elif num_tickets > MAX_TICKETS:
            await update.message.reply_text(
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {MAX_TICKETS}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ."
            )
            return ENTER_TICKETS
        else:
            event = context.user_data["chosen_event"]
            user_id = update.effective_user.id
            username = update.effective_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ {num_tickets} –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ {event['name']} ({event['date'].strftime('%Y-%m-%d')}) –ø–æ–ª—É—á–µ–Ω.\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç—ã."
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_message = (
                f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–∏–ª–µ—Ç—ã:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                f"–°–æ–±—ã—Ç–∏–µ: {event['name']}\n"
                f"–î–∞—Ç–∞: {event['date'].strftime('%Y-%m-%d')}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤: {num_tickets}"
            )
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_message)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            logging.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –±–∏–ª–µ—Ç—ã: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ö–æ—á–µ—Ç {num_tickets} –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ {event['name']}")

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            context.user_data.clear()
            await start(update, context)
            print(f"–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å ConversationHandler.END ({ConversationHandler.END})")
            return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–∏–ª–µ—Ç–æ–≤.")
        return ENTER_TICKETS

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return ConversationHandler.END

async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>\n"
            "–ü—Ä–∏–º–µ—Ä: /send 123456789 –ü—Ä–∏–≤–µ—Ç, –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
        )
        return

    try:
        target_user_id = int(context.args[0])
        message_text = " ".join(context.args[1:])

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(chat_id=target_user_id, text=message_text)
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target_user_id}.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id (—á–∏—Å–ª–æ).")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"handle_message: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç '{update.message.text}' –æ—Ç {update.effective_user.id}")
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
    )

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # üéâ ConversationHandler –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤
    conv_handler_events = ConversationHandler(
        entry_points=[CommandHandler("events", start_events),
                      MessageHandler(filters.Regex(r"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏"), start_events)],
        states={
            CHOOSE_EVENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_event)],
            CONFIRM_PURCHASE: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_purchase)],
            ENTER_TICKETS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_tickets)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
    )
    application.add_handler(conv_handler_events)

    # üéØ ConversationHandler –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏—ë–º
    conv_handler_appointment = ConversationHandler(
        entry_points=[CommandHandler("appointment", start_appointment),
                      MessageHandler(filters.Regex(r"üìå –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"), start_appointment)],
        states={
            CHOOSING_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_time)],
            CONFIRMING: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_appointment)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
    )
    application.add_handler(conv_handler_appointment)

    # üéØ ConversationHandler –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
    conv_handler_cancel = ConversationHandler(
        entry_points=[CommandHandler("my_appointments", my_appointments),
                      MessageHandler(filters.Regex(r"üìú –ú–æ–∏ –∑–∞–ø–∏—Å–∏"), my_appointments)],
        states={
            CANCEL_APPOINTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, cancel_appointment)],
        },
        fallbacks=[CommandHandler("cancel", cancel), CommandHandler("start", start)],
    )
    application.add_handler(conv_handler_cancel)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex(r"‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"), help_command))
    application.add_handler(MessageHandler(filters.Regex(r"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), contact))
    application.add_handler(MessageHandler(filters.Regex(r"üìÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"), schedule))
    application.add_handler(MessageHandler(filters.Regex(r"üìå –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º"), start_appointment))
    application.add_handler(MessageHandler(filters.Regex(r"üå¶ –ü–æ–≥–æ–¥–∞"), weather))
    application.add_handler(MessageHandler(filters.Regex(r"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏"), start_events))
    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(MessageHandler(filters.Regex(r"üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), send_message))
    application.add_handler(MessageHandler(filters.Regex(r"üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏"), view_appointments))

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("contact", contact))
    application.add_handler(CommandHandler("schedule", schedule))
    application.add_handler(CommandHandler("weather", weather))
    application.add_handler(CommandHandler("events", start_events))
    application.add_handler(CommandHandler("send", send_message))
    application.add_handler(CommandHandler("view_appointments", view_appointments))

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚úÖ")
    application.run_polling()
if __name__ == "__main__":
    main()
